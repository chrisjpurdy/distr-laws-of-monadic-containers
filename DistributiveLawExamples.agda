{-# OPTIONS --cubical --allow-unsolved-metas #-}

{-
  Examples of various distribute laws, including uniqueness proofs for certain ones
-}

open import ContainersPlus
open import ContainerExamples

open import Level renaming (suc to lsuc ; zero to lzero)
open import Function 
open import Cubical.Foundations.Prelude hiding (_‚ñ∑_)
open import Cubical.Data.Empty renaming (rec* to ‚ä•-rec)
open import Cubical.Data.Nat
open import Cubical.Data.Fin
open import Cubical.Data.Sigma renaming (fst to œÄ‚ÇÅ ; snd to œÄ‚ÇÇ)

module DistributiveLawExamples where

  open import MndContainer as MC
  open MC.MndContainer
  open MC.IsMndContainer
  open import MndDistributiveLaw as DL
  open DL.MndDistributiveLaw
  open MonadExamples

  MaybeDistr : ‚àÄ {‚Ñìs ‚Ñìp} (S : Set ‚Ñìs) (P : S ‚Üí Set ‚Ñìp) (MC : MndContainer ‚Ñìs ‚Ñìp (S ‚ñ∑ P)) ‚Üí
               MndDistributiveLaw ‚Ñìs ‚Ñìp ùüö JustOrNothing S P MaybeM MC
  u‚ÇÅ (MaybeDistr S P MC) true f = f tt
  u‚ÇÅ (MaybeDistr S P MC) false f = MC .Œπ
  u‚ÇÇ (MaybeDistr S P MC) true f _ = true
  u‚ÇÇ (MaybeDistr S P MC) false f _ = false
  v‚ÇÅ (MaybeDistr S P MC) {true} _ x = tt
  v‚ÇÇ (MaybeDistr S P MC) {true} {f} p x = p
  unit-ŒπB-shape‚ÇÅ (MaybeDistr S P MC) true = refl
  unit-ŒπB-shape‚ÇÅ (MaybeDistr S P MC) false = refl
  unit-ŒπB-shape‚ÇÇ (MaybeDistr S P MC) true = refl
  unit-ŒπB-shape‚ÇÇ (MaybeDistr S P MC) false = refl
  unit-ŒπB-pos‚ÇÅ (MaybeDistr S P MC) true i q tt = tt
  unit-ŒπB-pos‚ÇÇ (MaybeDistr S P MC) true i q tt = q
  unit-ŒπA-shape‚ÇÅ (MaybeDistr S P MC) _ = refl
  unit-ŒπA-shape‚ÇÇ (MaybeDistr S P MC) _ = refl
  unit-ŒπA-pos‚ÇÅ (MaybeDistr S P MC) s i q tt = tt
  unit-ŒπA-pos‚ÇÇ (MaybeDistr S P MC) s i q tt = q
  mul-A-shape‚ÇÅ (MaybeDistr S P MC) true f g = refl
  mul-A-shape‚ÇÅ (MaybeDistr S P MC) false f g = refl
  mul-A-shape‚ÇÇ (MaybeDistr S P MC) true f g = refl
  mul-A-shape‚ÇÇ (MaybeDistr S P MC) false f g = refl
  mul-A-pos‚ÇÅ (MaybeDistr S P MC) true f g = refl
  mul-A-pos‚ÇÅ (MaybeDistr {‚Ñìs} {‚Ñìp} S P MC) false f g i q ()
  mul-A-pos‚ÇÇ‚ÇÅ (MaybeDistr S P MC) true f g = refl
  mul-A-pos‚ÇÇ‚ÇÅ (MaybeDistr {‚Ñìs} {‚Ñìp} S P MC) false f g i q ()
  mul-A-pos‚ÇÇ‚ÇÇ (MaybeDistr S P MC) true f g = refl
  mul-A-pos‚ÇÇ‚ÇÇ (MaybeDistr S P MC) false f g i q ()
  mul-B-shape‚ÇÅ (MaybeDistr S P MC) true f g = refl
  mul-B-shape‚ÇÅ (MaybeDistr S P MC) false f g i = unit-r (isMndContainer MC) (MC .Œπ) (~ i)
  mul-B-shape‚ÇÇ (MaybeDistr S P MC) true f g = refl
  mul-B-shape‚ÇÇ (MaybeDistr S P MC) false f g i = Œª _ ‚Üí false
  mul-B-pos‚ÇÅ (MaybeDistr S P MC) true f g i q tt = tt 
  mul-B-pos‚ÇÅ (MaybeDistr S P MC) false f g i q ()
  mul-B-pos‚ÇÇ‚ÇÅ (MaybeDistr S P MC) true f g i q tt = (MC .pr‚ÇÅ) (f tt) (g tt) q
  mul-B-pos‚ÇÇ‚ÇÅ (MaybeDistr S P MC) false f g i q ()
  mul-B-pos‚ÇÇ‚ÇÇ (MaybeDistr S P MC) true f g i q tt = (MC .pr‚ÇÇ) (f tt) (g tt) q
  mul-B-pos‚ÇÇ‚ÇÇ (MaybeDistr S P MC) false f g i q ()

  lemF : ‚àÄ {‚Ñì ‚Ñì'} {A : Set ‚Ñì} (f g : ‚ä•* {‚Ñì'} ‚Üí A) ‚Üí f ‚â° g
  lemF f g = sym (isContrŒ†‚ä•* .snd f) ‚àô isContrŒ†‚ä•* .snd g

  module MaybeDistrUnique {‚Ñìs ‚Ñìp} (S : Set ‚Ñìs) (P : S ‚Üí Set ‚Ñìp) (MC : MndContainer ‚Ñìs ‚Ñìp (S ‚ñ∑ P))
                          (l : MndDistributiveLaw ‚Ñìs ‚Ñìp ùüö JustOrNothing S P MaybeM MC) where

    L‚ÇÄ = MaybeDistr S P MC

    u1 : (s : ùüö) (f : JustOrNothing s ‚Üí S) ‚Üí u‚ÇÅ L‚ÇÄ s f ‚â° u‚ÇÅ l s f
    u1 true f i = hcomp (Œª j ‚Üí Œª { (i = i0) ‚Üí f tt
                                 ; (i = i1) ‚Üí u‚ÇÅ l true (Œª x ‚Üí f (‚ä§-singleton x (~ j)))
                                 }) 
                        (unit-ŒπA-shape‚ÇÅ l (f tt) (~ i))
    u1 false f i = hcomp (Œª j ‚Üí Œª { (i = i0) ‚Üí Œπ MC
                                  ; (i = i1) ‚Üí u‚ÇÅ l false (lemF (const (Œπ MC)) f j) 
                                  })
                         (unit-ŒπB-shape‚ÇÅ l false (~ i))

    u2 : (s : ùüö) (f : JustOrNothing s ‚Üí S) ‚Üí
         PathP (Œª i ‚Üí P (u1 s f i) ‚Üí ùüö) (u‚ÇÇ L‚ÇÄ s f) (u‚ÇÇ l s f)
    u2 true f i = comp (Œª j ‚Üí P (compPath-filler (Œª i' ‚Üí unit-ŒπA-shape‚ÇÅ l (f tt) (~ i')) 
                                                 (Œª i' ‚Üí u‚ÇÅ l true (Œª x ‚Üí f (‚ä§-singleton x (~ i')))) j i
                                ) ‚Üí ùüö {‚Ñìs})
                       (Œª j ‚Üí Œª { (i = i0) ‚Üí Œª p ‚Üí true ;
                                  (i = i1) ‚Üí Œª p ‚Üí u‚ÇÇ l true (Œª x ‚Üí f (‚ä§-singleton x (~ j))) p })
                       (Œª p ‚Üí unit-ŒπA-shape‚ÇÇ l (f tt) (~ i) p)
    u2 false f = compPathP' {B = (Œª x ‚Üí P x ‚Üí ùüö)}
                            {x' = Œª x ‚Üí unit-ŒπB-shape‚ÇÇ l false (~ i0) x}
                            {y' = Œª p ‚Üí unit-ŒπB-shape‚ÇÇ l false (~ i1) p}
                            {z' = Œª p ‚Üí u‚ÇÇ l false (lemF (const (Œπ MC)) f i1) p}
                            (Œª i p ‚Üí unit-ŒπB-shape‚ÇÇ l false (~ i) p) 
                            (Œª i p ‚Üí u‚ÇÇ l false (lemF (const (Œπ MC)) f i) p)

    v1 : (s : ùüö) (f : JustOrNothing s ‚Üí S) ‚Üí
         PathP (Œª i ‚Üí (p : P (u1 s f i)) ‚Üí JustOrNothing (u2 s f i p) ‚Üí JustOrNothing s)
               (Œª p q ‚Üí v‚ÇÅ L‚ÇÄ {s} {f} p q) 
               (Œª p q ‚Üí v‚ÇÅ l {s} {f} p q)
    v1 true f i = comp (Œª j ‚Üí (p : P (compPath-filler (Œª k ‚Üí unit-ŒπA-shape‚ÇÅ l (f tt) (~ k)) 
                                                      (Œª k ‚Üí u‚ÇÅ l true (Œª x ‚Üí f (‚ä§-singleton x (~ k)))) j i
                                     )) ‚Üí 
                              JustOrNothing {‚Ñìs} {‚Ñìp} (compPathP'-filler {B = (Œª x ‚Üí P x ‚Üí ùüö)}
                                                                         (Œª k p' ‚Üí unit-ŒπA-shape‚ÇÇ l (f tt) (~ k) p') 
                                                                         (Œª k p' ‚Üí u‚ÇÇ l true (Œª x ‚Üí f (‚ä§-singleton x (~ k))) p') j i p
                                            ) ‚Üí 
                              ‚ä§ {‚Ñìp}
                       )
                       (Œª j ‚Üí Œª { (i = i0) ‚Üí Œª p q ‚Üí tt ;
                                  (i = i1) ‚Üí Œª p q ‚Üí ‚ä§-singleton (v‚ÇÅ l p q) (~ j)
                                })
                       (Œª p q ‚Üí tt)
    v1 false f = toPathP (funExt Œª p ‚Üí funExt (Œª q ‚Üí ‚ä•-rec (subst JustOrNothing (lem p) q)))
      where
        lem : (p : P (u‚ÇÅ l false f)) ‚Üí u‚ÇÇ l false f p ‚â° false
        lem p = funExt‚Åª (sym (fromPathP (u2 false f))) p

    v2 : (s : ùüö) (f : JustOrNothing s ‚Üí S) ‚Üí
         PathP (Œª i ‚Üí (p : P (u1 s f i)) (q : JustOrNothing (u2 s f i p)) ‚Üí P (f (v1 s f i p q)))
               (Œª p q ‚Üí v‚ÇÇ L‚ÇÄ {s} {f} p q) 
               (Œª p q ‚Üí v‚ÇÇ l {s} {f} p q)
    v2 true f i =    
        comp (Œª j ‚Üí (p : P (compPath-filler (Œª k ‚Üí unit-ŒπA-shape‚ÇÅ l (f tt) (~ k)) 
                                            (Œª k ‚Üí u‚ÇÅ l true (Œª x ‚Üí f (‚ä§-singleton x (~ k)))) j i
                           )) ‚Üí 
                              (q : JustOrNothing {‚Ñìs} {‚Ñìp} (compPathP'-filler {B = (Œª x ‚Üí P x ‚Üí ùüö)}
                                                                              (Œª k p' ‚Üí unit-ŒπA-shape‚ÇÇ l (f tt) (~ k) p') 
                                                                              (Œª k p' ‚Üí u‚ÇÇ l true (Œª x ‚Üí f (‚ä§-singleton x (~ k))) p') j i p
                                                           )) ‚Üí 
                              P (f (fill (Œª k' ‚Üí (p : P (compPath-filler (Œª k ‚Üí unit-ŒπA-shape‚ÇÅ l (f tt) (~ k)) 
                                                                         (Œª k ‚Üí u‚ÇÅ l true (Œª x ‚Üí f (‚ä§-singleton x (~ k)))) k' i
                                                        )) ‚Üí 
                                                 JustOrNothing {‚Ñìs} {‚Ñìp} (compPathP'-filler {B = (Œª x ‚Üí P x ‚Üí ùüö)}
                                                                                            (Œª k p' ‚Üí unit-ŒπA-shape‚ÇÇ l (f tt) (~ k) p') 
                                                                                            (Œª k p' ‚Üí u‚ÇÇ l true (Œª x ‚Üí f (‚ä§-singleton x (~ k))) p') k' i p
                                                                         ) ‚Üí 
                                                 ‚ä§ {‚Ñìp}
                                         )
                                         (Œª k' ‚Üí Œª { (i = i0) ‚Üí Œª p q ‚Üí tt
                                                   ; (i = i1) ‚Üí Œª p q ‚Üí ‚ä§-singleton (v‚ÇÅ l p q) (~ k')
                                                   })
                                         (inS (Œª p q ‚Üí tt))
                                         j p q
                                ))
               )
               (Œª j ‚Üí Œª { (i = i0) ‚Üí Œª p q ‚Üí p
                        ; (i = i1) ‚Üí Œª p q ‚Üí v‚ÇÇ l {true} {Œª x ‚Üí f (‚ä§-singleton x (~ j))} p q
                        })
               (Œª p q ‚Üí unit-ŒπA-pos‚ÇÇ l (f tt) (~ i) p q)
    
    v2 false f = toPathP (funExt Œª p ‚Üí funExt (Œª q ‚Üí ‚ä•-rec (subst JustOrNothing (lem p) q)))
      where
        lem : (p : P (u‚ÇÅ l false f)) ‚Üí u‚ÇÇ l false f p ‚â° false
        lem p = funExt‚Åª (sym (fromPathP (u2 false f))) p


  ReaderDistr : ‚àÄ {‚Ñìs ‚Ñìp} (A : Set ‚Ñìp) (S : Set ‚Ñìs) (P : S ‚Üí Set ‚Ñìp)
    ‚Üí (MC : MndContainer ‚Ñìs ‚Ñìp (S ‚ñ∑ P))
    ‚Üí MndDistributiveLaw ‚Ñìs ‚Ñìp S P (‚ä§ {‚Ñìs}) (const A) MC (ReaderM A)
  u‚ÇÅ (ReaderDistr A S P MC) s _ = tt
  u‚ÇÇ (ReaderDistr A S P MC) s _ a = s
  v‚ÇÅ (ReaderDistr A S P MC) a p = p
  v‚ÇÇ (ReaderDistr A S P MC) a p = a
  unit-ŒπB-shape‚ÇÇ (ReaderDistr A S P MC) s = refl
  unit-ŒπB-shape‚ÇÅ (ReaderDistr A S P MC) s = refl
  unit-ŒπB-pos‚ÇÅ (ReaderDistr A S P MC) s = refl
  unit-ŒπB-pos‚ÇÇ (ReaderDistr A S P MC) s i a p = a
  unit-ŒπA-shape‚ÇÇ (ReaderDistr A S P MC) tt = refl
  unit-ŒπA-shape‚ÇÅ (ReaderDistr A S P MC) tt = refl
  unit-ŒπA-pos‚ÇÅ (ReaderDistr A S P MC) tt = refl
  unit-ŒπA-pos‚ÇÇ (ReaderDistr A S P MC) tt = refl
  mul-A-shape‚ÇÅ (ReaderDistr A S P MC) s f g = refl
  mul-A-shape‚ÇÇ (ReaderDistr A S P MC) s f g = refl
  mul-A-pos‚ÇÅ (ReaderDistr A S P MC) s f g = refl
  mul-A-pos‚ÇÇ‚ÇÅ (ReaderDistr A S P MC) s f g = refl
  mul-A-pos‚ÇÇ‚ÇÇ (ReaderDistr A S P MC) s f g = refl
  mul-B-shape‚ÇÅ (ReaderDistr A S P MC) s f g = refl
  mul-B-shape‚ÇÇ (ReaderDistr A S P MC) s f g = refl
  mul-B-pos‚ÇÅ  (ReaderDistr A S P MC) s f g = refl
  mul-B-pos‚ÇÇ‚ÇÅ (ReaderDistr A S P MC) s f g = refl
  mul-B-pos‚ÇÇ‚ÇÇ (ReaderDistr A S P MC) s f g = refl

  module ReaderDistrUnique {‚Ñìs ‚Ñìp} (A : Set ‚Ñìp) (S : Set ‚Ñìs) (P : S ‚Üí Set ‚Ñìp) (MC : MndContainer ‚Ñìs ‚Ñìp (S ‚ñ∑ P))
                           (L : MndDistributiveLaw ‚Ñìs ‚Ñìp S P (‚ä§ {‚Ñìs}) (const A) MC (ReaderM A)) where

    L‚ÇÄ = ReaderDistr A S P MC

    lem‚ä§ : (s : S) (f : P s ‚Üí ‚ä§ {‚Ñìs}) ‚Üí f ‚â° const tt
    lem‚ä§ s f i p = ‚ä§-singleton (f p) i

    u1 : (s : S) (f : P s ‚Üí ‚ä§ {‚Ñìs}) ‚Üí u‚ÇÅ L‚ÇÄ s f ‚â° u‚ÇÅ L s f
    u1 s f i = ‚ä§-singleton (u‚ÇÅ L s f) (~ i)

    u2 : (s : S) (f : P s ‚Üí ‚ä§ {‚Ñìs}) (a : A) ‚Üí u‚ÇÇ L‚ÇÄ s f a ‚â° u‚ÇÇ L s f a
    u2 s f a i = hcomp (Œª j ‚Üí Œª { (i = i0) ‚Üí s
                                ; (i = i1) ‚Üí u‚ÇÇ L s (lem‚ä§ s f (~ j)) a }) (unit-ŒπB-shape‚ÇÇ L s (~ i) a)

    v1 : (s : S) (f : P s ‚Üí ‚ä§ {‚Ñìs}) (a : A) ‚Üí
         PathP (Œª i ‚Üí P (u2 s f a i) ‚Üí P s)
               (v‚ÇÅ L‚ÇÄ {s} {f} a)
               (v‚ÇÅ L {s} {f} a)
    v1 s f a i p = compPathP' {B = (Œª x ‚Üí P x ‚Üí P s)} side2 side1 i p
      where
        side1 : PathP (Œª i ‚Üí P (u‚ÇÇ L s (lem‚ä§ s f (~ i)) a) ‚Üí P s)
                      (v‚ÇÅ L {s} {const tt} a)
                      (v‚ÇÅ L {s} {f} a)
        side1 i p = v‚ÇÅ L {s} {lem‚ä§ s f (~ i)} a p

        side2 : PathP (Œª i ‚Üí P (unit-ŒπB-shape‚ÇÇ L s (~ i) a) ‚Üí P s)
                      (Œª p ‚Üí p)
                      (v‚ÇÅ L {s} {const tt} a)
        side2 i p = unit-ŒπB-pos‚ÇÅ L s (~ i) a p

    v2 : (s : S) (f : P s ‚Üí ‚ä§ {‚Ñìs}) (a : A) ‚Üí
         PathP (Œª i ‚Üí P (u2 s f a i) ‚Üí A)
               (v‚ÇÇ L‚ÇÄ {s} {f} a)
               (v‚ÇÇ L {s} {f} a)
    v2 s f a i p = compPathP' {B = (Œª x ‚Üí P x ‚Üí A)} side2 side1 i p
      where
        side1 : PathP (Œª i ‚Üí P (u‚ÇÇ L s (lem‚ä§ s f (~ i)) a) ‚Üí A)
                      (v‚ÇÇ L {s} {const tt} a)
                      (v‚ÇÇ L {s} {f} a)
        side1 i p = v‚ÇÇ L {s} {lem‚ä§ s f (~ i)} a p

        side2 : PathP (Œª i ‚Üí P (unit-ŒπB-shape‚ÇÇ L s (~ i) a) ‚Üí A)
                      (Œª _ ‚Üí a)
                      (v‚ÇÇ L {s} {const tt} a)
        side2 i p = unit-ŒπB-pos‚ÇÇ L s (~ i) a p
  
  -- An example of a distributive law, this one is not unique for specific S ‚ñ∑ P
  WriterDistr : ‚àÄ {‚Ñìs ‚Ñìp} (A S : Set ‚Ñìs) (P : S ‚Üí Set ‚Ñìp) ‚Üí
                  (mon : Monoid ‚Ñìs A) ‚Üí (MC : MndContainer ‚Ñìs ‚Ñìp (S ‚ñ∑ P)) ‚Üí
                  MndDistributiveLaw ‚Ñìs ‚Ñìp A (const ‚ä§) S P (WriterM A mon) MC
  u‚ÇÅ (WriterDistr A S P mon MC) a s = s tt
  u‚ÇÇ (WriterDistr A S P mon MC) a s _ = a
  v‚ÇÅ (WriterDistr A S P mon MC) _ tt = tt
  v‚ÇÇ (WriterDistr A S P mon MC) p tt = p
  unit-ŒπB-shape‚ÇÅ (WriterDistr A S P mon MC) a = refl
  unit-ŒπB-shape‚ÇÇ (WriterDistr A S P mon MC) a = refl
  unit-ŒπB-pos‚ÇÅ (WriterDistr A S P mon MC) a i p tt = tt
  unit-ŒπB-pos‚ÇÇ (WriterDistr A S P mon MC) a i p tt = p
  unit-ŒπA-shape‚ÇÅ (WriterDistr A S P mon MC) s = refl
  unit-ŒπA-shape‚ÇÇ (WriterDistr A S P mon MC) s = refl
  unit-ŒπA-pos‚ÇÅ (WriterDistr A S P mon MC) s i p tt = tt
  unit-ŒπA-pos‚ÇÇ (WriterDistr A S P mon MC) s i p tt = p
  mul-A-shape‚ÇÅ (WriterDistr A S P mon MC) a f g = refl
  mul-A-shape‚ÇÇ (WriterDistr A S P mon MC) a f g = refl
  mul-A-pos‚ÇÅ (WriterDistr A S P mon MC) a f g i p tt = tt
  mul-A-pos‚ÇÇ‚ÇÅ (WriterDistr A S P mon MC) a f g i p tt = tt
  mul-A-pos‚ÇÇ‚ÇÇ (WriterDistr A S P mon MC) a f g i p tt = p
  mul-B-shape‚ÇÅ (WriterDistr A S P mon MC) a f g = refl
  mul-B-shape‚ÇÇ (WriterDistr A S P mon MC) a f g = refl
  mul-B-pos‚ÇÅ (WriterDistr A S P mon MC) a f g i p tt = tt
  mul-B-pos‚ÇÇ‚ÇÅ (WriterDistr A S P mon MC) a f g i p tt = pr‚ÇÅ MC (f tt) (g tt) p
  mul-B-pos‚ÇÇ‚ÇÇ (WriterDistr A S P mon MC) a f g i p tt = pr‚ÇÇ MC (f tt) (g tt) p

  module MixedDistributiveLawExamples where

    open import DirectedContainer as DC
    open DC.DirectedContainer
    open import MndDirectedDistributiveLaw as MDDL
    open MDDL.MndDirectedDistributiveLaw
    open import DirectedMndDistributiveLaw
    open ComonadExamples

    WriterCReaderMDistr : ‚àÄ {‚Ñìs ‚Ñìp} (A : Set ‚Ñìs) (B : Set ‚Ñìp) ‚Üí 
      MndDirectedDistributiveLaw ‚Ñìs ‚Ñìp A (const (‚ä§ {‚Ñìp})) (‚ä§ {‚Ñìs}) (const B) (WriterC A) (ReaderM B)
    u‚ÇÅ (WriterCReaderMDistr A B) a f = tt
    u‚ÇÇ (WriterCReaderMDistr A B) a f b = a
    v‚ÇÅ (WriterCReaderMDistr A B) b tt = tt
    v‚ÇÇ (WriterCReaderMDistr A B) b tt = b
    unit-oA-shape (WriterCReaderMDistr A B) a f i = ‚ä§-singleton (f tt) (~ i)
    unit-oA-pos‚ÇÅ (WriterCReaderMDistr A B) a f i b = tt
    unit-oA-pos‚ÇÇ (WriterCReaderMDistr A B) a f i b = b
    mul-A-shape‚ÇÅ (WriterCReaderMDistr A B) a f = refl
    mul-A-shape‚ÇÇ (WriterCReaderMDistr A B) a f = refl
    mul-A-shape‚ÇÉ (WriterCReaderMDistr A B) a f i b tt = a
    mul-A-pos‚ÇÅ (WriterCReaderMDistr A B) s f i b tt tt = tt
    mul-A-pos‚ÇÇ (WriterCReaderMDistr A B) s f i b tt tt = b
    unit-ŒπB-shape‚ÇÅ (WriterCReaderMDistr A B) a = refl
    unit-ŒπB-shape‚ÇÇ (WriterCReaderMDistr A B) a = refl
    unit-ŒπB-pos‚ÇÅ (WriterCReaderMDistr A B) a i b tt = tt
    unit-ŒπB-pos‚ÇÇ (WriterCReaderMDistr A B) a i b tt = b
    mul-B-shape‚ÇÅ (WriterCReaderMDistr A B) a f g = refl
    mul-B-shape‚ÇÇ (WriterCReaderMDistr A B) a f g = refl
    mul-B-pos‚ÇÅ (WriterCReaderMDistr A B) a f g i b tt = tt
    mul-B-pos‚ÇÇ‚ÇÅ (WriterCReaderMDistr A B) a f g i b tt = b
    mul-B-pos‚ÇÇ‚ÇÇ (WriterCReaderMDistr A B) a f g i b tt = b
    
    module WriterCReaderMDistrUnique {‚Ñìs ‚Ñìp : Level} (A : Set ‚Ñìs) (B : Set ‚Ñìp)
      (L : MndDirectedDistributiveLaw ‚Ñìs ‚Ñìp A (const (‚ä§ {‚Ñìp})) (‚ä§ {‚Ñìs}) (const B) (WriterC A) (ReaderM B)) where

      L‚ÇÄ = WriterCReaderMDistr A B

      lem‚ä§ : (a : A) (f : ‚ä§ {‚Ñìp} ‚Üí ‚ä§ {‚Ñìs}) ‚Üí f ‚â° const tt
      lem‚ä§ a f i p = ‚ä§-singleton (f p) i

      u1 : (a : A) (f : ‚ä§ {‚Ñìp} ‚Üí ‚ä§ {‚Ñìs}) ‚Üí u‚ÇÅ L‚ÇÄ a f ‚â° u‚ÇÅ L a f
      u1 a f i = ‚ä§-singleton (u‚ÇÅ L a f) (~ i)

      u2 : (a : A) (f : ‚ä§ {‚Ñìp} ‚Üí ‚ä§ {‚Ñìs}) (b : B) ‚Üí u‚ÇÇ L‚ÇÄ a f b ‚â° u‚ÇÇ L a f b
      u2 a f b i = hcomp (Œª j ‚Üí Œª { (i = i0) ‚Üí a
                                  ; (i = i1) ‚Üí u‚ÇÇ L a (lem‚ä§ a f (~ j)) b }) (unit-ŒπB-shape‚ÇÇ L a (~ i) b)

      v1 : (a : A) (f : ‚ä§ {‚Ñìp} ‚Üí ‚ä§ {‚Ñìs}) (b : B) (x : ‚ä§ {‚Ñìp}) ‚Üí v‚ÇÅ L‚ÇÄ {a} {f} b x ‚â° v‚ÇÅ L {a} {f} b x
      v1 a f b tt i = hcomp (Œª j ‚Üí Œª { (i = i0) ‚Üí tt
                                     ; (i = i1) ‚Üí v‚ÇÅ L {a} {lem‚ä§ a f (~ j)} b tt }) (unit-ŒπB-pos‚ÇÅ L a (~ i) b tt)

      v2 : (a : A) (f : ‚ä§ {‚Ñìp} ‚Üí ‚ä§ {‚Ñìs}) (b : B) (x : ‚ä§ {‚Ñìp}) ‚Üí v‚ÇÇ L‚ÇÄ {a} {f} b x ‚â° v‚ÇÇ L {a} {f} b x
      v2 a f b tt i = hcomp (Œª j ‚Üí Œª { (i = i0) ‚Üí b
                                     ; (i = i1) ‚Üí v‚ÇÇ L {a} {lem‚ä§ a f (~ j)} b tt }) (unit-ŒπB-pos‚ÇÇ L a (~ i) b tt)

    record MonoidFuncAction {‚Ñìa ‚Ñìb : Level} (A : Set ‚Ñìa) (B : Set ‚Ñìb)
                       (monA : Monoid ‚Ñìa A) (monB : Monoid ‚Ñìb B) :
                       Set (lsuc (‚Ñìa ‚äî ‚Ñìb)) where
      open Monoid monA renaming (e to e·¥¨ ; _‚äï_ to _‚äï·¥¨_)
      open Monoid monB renaming (e to e·¥Æ ; _‚äï_ to _‚äï·¥Æ_)
      field
        œá : (A ‚Üí B) ‚Üí A ‚Üí A
        e·¥¨-pres : (f : A ‚Üí B) ‚Üí œá f e·¥¨ ‚â° e·¥¨
        ‚äï·¥¨-pres : (f : A ‚Üí B) (a a' : A) ‚Üí
                 œá f (a ‚äï·¥¨ a') ‚â° œá f a ‚äï·¥¨ œá (Œª x ‚Üí f (œá f a ‚äï·¥¨ x)) a' 
        e·¥Æ-pres : (a : A) ‚Üí œá (const e·¥Æ) a ‚â° a
        ‚äï·¥Æ-pres : (f g : A ‚Üí B) (a : A) ‚Üí œá (Œª x ‚Üí f x ‚äï·¥Æ g x) a ‚â° œá f (œá (Œª x ‚Üí g (œá f x)) a)
    open MonoidFuncAction
    open Monoid

    ReaderCWriterMDistr : ‚àÄ {‚Ñìs ‚Ñìp} (A : Set ‚Ñìp) (B : Set ‚Ñìs) ‚Üí
                            (monA : Monoid ‚Ñìp A) (monB : Monoid ‚Ñìs B) ‚Üí 
                            (t : MonoidFuncAction A B monA monB) ‚Üí
                            MndDirectedDistributiveLaw ‚Ñìs ‚Ñìp ‚ä§ (const A) B (const ‚ä§) (ReaderC A monA) (WriterM B monB)
    u‚ÇÅ (ReaderCWriterMDistr {‚Ñìs} {‚Ñìp} A B monA monB t) tt f = f (o (ReaderC {‚Ñìs} {‚Ñìp} A monA) tt) 
    u‚ÇÇ (ReaderCWriterMDistr A B monA monB t) tt f tt = tt
    v‚ÇÅ (ReaderCWriterMDistr A B monA monB t) {tt} {f} tt a = œá t f a
    v‚ÇÇ (ReaderCWriterMDistr A B monA monB t) {tt} {f} tt a = tt
    unit-oA-shape (ReaderCWriterMDistr A B monA monB t) tt f = refl
    unit-oA-pos‚ÇÅ (ReaderCWriterMDistr A B monA monB t) tt f i tt = e·¥¨-pres t f i
    unit-oA-pos‚ÇÇ (ReaderCWriterMDistr A B monA monB t) tt f i tt = tt
    mul-A-shape‚ÇÅ (ReaderCWriterMDistr A B monA monB t) tt f i = f (‚äï-unit-l monA (e monA) (~ i))
    mul-A-shape‚ÇÇ (ReaderCWriterMDistr A B monA monB t) tt f i tt = tt
    mul-A-shape‚ÇÉ (ReaderCWriterMDistr A B monA monB t) tt f i tt a = tt
    mul-A-pos‚ÇÅ (ReaderCWriterMDistr A B monA monB t) tt f i tt a a' = (‚äï·¥¨-pres t f a a' ‚àô sym lem) i
      where
        lem : (monA ‚äï œá t (Œª p ‚Üí f ((monA ‚äï p) (e monA))) a) (œá t (Œª p' ‚Üí f ((monA ‚äï œá t (Œª p ‚Üí f ((monA ‚äï p) (e monA))) a) p')) a')
              ‚â° (monA ‚äï œá t f a) (œá t (Œª x ‚Üí f ((monA ‚äï œá t f a) x)) a')
        lem i = (monA ‚äï œá t (Œª p ‚Üí f (‚äï-unit-r monA p i)) a) (œá t (Œª x ‚Üí f ((monA ‚äï œá t (Œª p ‚Üí f (‚äï-unit-r monA p i)) a) x)) a')
    mul-A-pos‚ÇÇ (ReaderCWriterMDistr A B monA monB t) tt f i tt a a' = tt
    unit-ŒπB-shape‚ÇÅ (ReaderCWriterMDistr A B monA monB t) tt = refl
    unit-ŒπB-shape‚ÇÇ (ReaderCWriterMDistr A B monA monB t) tt i tt = tt
    unit-ŒπB-pos‚ÇÅ (ReaderCWriterMDistr A B monA monB t) tt i tt a = e·¥Æ-pres t a i
    unit-ŒπB-pos‚ÇÇ (ReaderCWriterMDistr A B monA monB t) tt i tt a = tt
    mul-B-shape‚ÇÅ (ReaderCWriterMDistr A B monA monB t) tt f g i = (monB ‚äï f (e monA)) (g (e·¥¨-pres t f (~ i)) tt)
    mul-B-shape‚ÇÇ (ReaderCWriterMDistr A B monA monB t) tt f g i tt = tt
    mul-B-pos‚ÇÅ (ReaderCWriterMDistr A B monA monB t) tt f g i tt a = ‚äï·¥Æ-pres t f (Œª x ‚Üí g x tt) a i
    mul-B-pos‚ÇÇ‚ÇÅ (ReaderCWriterMDistr A B monA monB t) tt f g i tt a = tt
    mul-B-pos‚ÇÇ‚ÇÇ (ReaderCWriterMDistr A B monA monB t) tt f g i tt a = tt
